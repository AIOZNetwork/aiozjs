syntax = "proto3";
package gravity.v1;

import "gogoproto/gogo.proto";
import "google/protobuf/any.proto";
import "cosmos_proto/cosmos.proto";


option go_package = "github.com/Gravity-Bridge/Gravity-Bridge/module/x/gravity/types";

// ClaimType is the cosmos type of an event from the counterpart chain that can
// be handled
enum ClaimType {
  option (gogoproto.goproto_enum_prefix) = false;

  // An unspecified claim type
  CLAIM_TYPE_UNSPECIFIED              = 0;
  // A claim for a SendToCosmos transaction
  CLAIM_TYPE_SEND_TO_COSMOS           = 1;
  // A claim for when batches are relayed
  CLAIM_TYPE_BATCH_SEND_TO_EVM_CHAIN  = 2;
  // A claim for when an erc20 contract has been deployed
  CLAIM_TYPE_ERC20_DEPLOYED           = 3;
  // A claim for when a logic call has been executed
  CLAIM_TYPE_LOGIC_CALL_EXECUTED      = 4;
  // A claim for when a valset update has happened
  CLAIM_TYPE_VALSET_UPDATED           = 5;
  // A claim for a SendFromEvmChainToEvmChain transaction
  CLAIM_TYPE_SEND_FROM_EVM_CHAIN_TO_EVM_CHAIN = 6;
}

// Attestation is an aggregate of `claims` that eventually becomes `observed` by
// all orchestrators
// EVENT_NONCE:
// EventNonce a nonce provided by the gravity contract that is unique per event fired
// These event nonces must be relayed in order. This is a correctness issue,
// if relaying out of order transaction replay attacks become possible
// OBSERVED:
// Observed indicates that >67% of validators have attested to the event,
// and that the event should be executed by the gravity state machine
//
// The actual content of the claims is passed in with the transaction making the claim
// and then passed through the call stack alongside the attestation while it is processed
// the key in which the attestation is stored is keyed on the exact details of the claim
// but there is no reason to store those exact details becuause the next message sender
// will kindly provide you with them.
message Attestation {
  bool                observed = 1;
  repeated string     votes    = 2;
  uint64              height   = 3;
  google.protobuf.Any claim    = 4;
}

// ERC20Token unique identifier for an Evm chain ERC20 token.
// CONTRACT:
// The contract address on EVM chain of the token, this could be a Cosmos
// originated token, if so it will be the ERC20 address of the representation
// (note: developers should look up the token symbol using the address on EVM chain to display for UI)
message ERC20Token {
  string contract       = 1;
  string amount         = 2 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable)   = false
  ];
}

message EventObservation {
  string chain_name       = 1;
  string nonce            = 2;
  string attestation_type = 3;
  string bridge_contract  = 4;
  string bridge_chain_id  = 5;
  string attestation_id   = 6;
  string success          = 7;
}

message EventSendToCosmos {
  string chain_name     = 1;
  string nonce          = 2;
  string amount         = 3;
  string token          = 4;
}

message EventSendToCosmosInvalid {
  string chain_name     = 1;
  string nonce          = 2;
  string amount         = 3;
  string token          = 4;
}

message EventSendToCosmosLocal {
  string chain_name     = 1;
  string nonce          = 2;
  string receiver       = 3;
  string token          = 4;
  string amount         = 5;
}

message EventSendToCosmosPendingIbcAutoForward {
  string chain_name     = 1;
  string nonce          = 2;
  string receiver       = 3;
  string token          = 4;
  string amount         = 5;
  string channel        = 6;
}

message EventSendToCosmosExecutedIbcAutoForward {
  string chain_name     = 1;
  string nonce          = 2;
  string receiver       = 3;
  string token          = 4;
  string amount         = 5;
  string channel        = 6;
  string timeout_time   = 7;
  string timeout_height = 8;
}

message EventSendFromEvmChainToEvmChain {
  string chain_name     = 1;
  string nonce          = 2;
  string token          = 3;
  string amount         = 4;  
  string bridge_fee     = 5;
  string chain_fee      = 6;
  string to_chain_name  = 7;
  string receiver       = 8;
  string sender         = 9;
  string tx_id          = 10;
}

message EventSendFromEvmChainToEvmChainInvalid {
  string chain_name     = 1;
  string nonce          = 2;
  string amount         = 3;  
  string token          = 4;
}