syntax = "proto3";
package aioz.aiozrc20.v1;

import "gogoproto/gogo.proto";
import "cosmos/bank/v1beta1/bank.proto";
option go_package = "x/aiozrc20/types";

// Owner enumerates the ownership of an AIOZRC20 contract.
enum Owner {
  option (gogoproto.goproto_enum_prefix) = false;
  // OWNER_UNSPECIFIED defines an invalid/undefined owner.
  OWNER_UNSPECIFIED = 0;
  // OWNER_MODULE aiozrc20 is owned by the aiozrc20 module account.
  OWNER_MODULE = 1;
  // EXTERNAL aiozrc20 is owned by an external account.
  OWNER_EXTERNAL = 2;
}

// TokenPair defines an instance that records pairing consisting of a Cosmos
// native Coin and an AIOZRC20 token address.
message TokenPair {
  option (gogoproto.equal) = true;
  // address of AIOZRC20 contract token
  string aiozrc20_address = 1 [ (gogoproto.customname) = "AIOZRC20Address" ];
  // cosmos base denomination to be mapped to
  string denom = 2;
  // shows token mapping enable status
  bool enabled = 3;
  // AIOZRC20 owner address ENUM (0 invalid, 1 ModuleAccount, 2 external address)
  Owner contract_owner = 4;
}

// RegisterCoinProposal is a gov Content type to register a token pair
message RegisterCoinProposal {
  option (gogoproto.equal) = false;
  // title of the proposal
  string title = 1;
  // proposal description
  string description = 2;
  // token pair of Cosmos native denom and AIOZRC20 token address
  cosmos.bank.v1beta1.Metadata metadata = 3 [ (gogoproto.nullable) = false ];
}

// RegisterCoinProposal is a gov Content type to register a token pair
message RegisterAIOZRC20Proposal {
  option (gogoproto.equal) = false;
  // title of the proposal
  string title = 1;
  // proposal description
  string description = 2;
  // contract address of AIOZRC20 token
  string aiozrc20_address = 3 [ (gogoproto.customname) = "AIOZRC20Address" ];
}

// ToggleTokenPairConversionProposal is a gov Content type to toggle
// the conversion of a token pair's AIOZRC20.
message ToggleTokenPairConversionProposal {
  option (gogoproto.equal) = true;
  // title of the proposal
  string title = 1;
  // proposal description
  string description = 2;
  // token identifier can be either the hex contract address of the AIOZRC20 or the
  // Cosmos base denomination
  string token = 3;
}

// UpdateTokenPairProposal is a gov Content type to update a token pair's
// AIOZRC20 contract address.
message UpdateTokenPairProposal {
  option (gogoproto.equal) = true;
  // title of the proposal
  string title = 1;
  // proposal description
  string description = 2;
  // contract address of AIOZRC20 token
  string aiozrc20_address = 3 [ (gogoproto.customname) = "AIOZRC20Address" ];
  // new address of AIOZRC20 token contract
  string new_aiozrc20_address = 4 [ (gogoproto.customname) = "NewAIOZRC20Address" ];
}
