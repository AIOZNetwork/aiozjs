syntax = "proto3";
package gravity.v1;
import "cosmos/base/v1beta1/coin.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "gravity/v1/types.proto";
import "google/protobuf/any.proto";
import "cosmos_proto/cosmos.proto";
option go_package = "github.com/Gravity-Bridge/Gravity-Bridge/module/x/gravity/types";

// Msg defines the state transitions possible within gravity
service Msg {
  rpc ValsetConfirm(MsgValsetConfirm) returns (MsgValsetConfirmResponse) {
    option (google.api.http).post = "/gravity/v1/valset_confirm";
  }
  rpc SendToEvmChain(MsgSendToEvmChain) returns (MsgSendToEvmChainResponse) {
    option (google.api.http).post = "/gravity/v1/send_to_evm_chain";
  }
  rpc RequestBatch(MsgRequestBatch) returns (MsgRequestBatchResponse) {
    option (google.api.http).post = "/gravity/v1/request_batch";
  }
  rpc ConfirmBatch(MsgConfirmBatch) returns (MsgConfirmBatchResponse) {
    option (google.api.http).post = "/gravity/v1/confirm_batch";
  }
  rpc ConfirmLogicCall(MsgConfirmLogicCall) returns (MsgConfirmLogicCallResponse) {
    option (google.api.http).post = "/gravity/v1/confim_logic";
  }
  rpc SendToCosmosClaim(MsgSendToCosmosClaim) returns (MsgSendToCosmosClaimResponse) {
    option (google.api.http).post = "/gravity/v1/send_to_cosmos_claim";
  }
  rpc SendFromEvmChainToEvmChainClaim(MsgSendFromEvmChainToEvmChainClaim) returns (MsgSendFromEvmChainToEvmChainClaimResponse) {
    option (google.api.http).post = "/gravity/v1/send_from_evm_chain_to_evm_chain_claim";
  }
  rpc ExecuteIbcAutoForwards(MsgExecuteIbcAutoForwards) returns (MsgExecuteIbcAutoForwardsResponse) {
    option (google.api.http).post = "/gravity/v1/execute_ibc_auto_forwards";
  }
  rpc BatchSendToEvmChainClaim(MsgBatchSendToEvmChainClaim) returns (MsgBatchSendToEvmChainClaimResponse) {
    option (google.api.http).post = "/gravity/v1/batch_send_to_evm_chain_claim";
  }
  rpc ValsetUpdateClaim(MsgValsetUpdatedClaim) returns (MsgValsetUpdatedClaimResponse) {
    option (google.api.http).post = "/gravity/v1/valset_updated_claim";
  }
  rpc ERC20DeployedClaim(MsgERC20DeployedClaim)
      returns (MsgERC20DeployedClaimResponse) {
    option (google.api.http).post = "/gravity/v1/erc20_deployed_claim";
  }
  rpc LogicCallExecutedClaim(MsgLogicCallExecutedClaim)
      returns (MsgLogicCallExecutedClaimResponse) {
    option (google.api.http).post = "/gravity/v1/logic_call_executed_claim";
  }
  rpc SetOrchestratorAddress(MsgSetOrchestratorAddress) returns (MsgSetOrchestratorAddressResponse) {
    option (google.api.http).post = "/gravity/v1/set_orchestrator_address";
  }
  rpc CancelSendToEvmChain(MsgCancelSendToEvmChain) returns (MsgCancelSendToEvmChainResponse) {
    option (google.api.http).post = "/gravity/v1/cancel_send_to_evm_chain";
  }
  rpc SubmitBadSignatureEvidence(MsgSubmitBadSignatureEvidence) returns (MsgSubmitBadSignatureEvidenceResponse) {
    option (google.api.http).post = "/gravity/v1/submit_bad_signature_evidence";
  }
}

// MsgSetOrchestratorAddress
// this message allows validators to delegate their voting responsibilities
// to a given key. This key is then used as an optional authentication method
// for sigining oracle claims
// VALIDATOR
// The validator field is a cosmosvaloper1... string (i.e. sdk.ValAddress)
// that references a validator in the active set
// ORCHESTRATOR
// The orchestrator field is a cosmos1... string  (i.e. sdk.AccAddress) that
// references the key that is being delegated to
// ETH_ADDRESS
// This is a hex encoded 0x Ethereum public key that will be used by this validator
// on Ethereum
message MsgSetOrchestratorAddress {
  string validator    = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string orchestrator = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  repeated EvmChainAddress evm_addresses  = 3 [(gogoproto.nullable) = false];
}

message EvmChainAddress {
  string chain_name  = 1;
  string evm_address = 2;
}

message MsgSetOrchestratorAddressResponse {}

// MsgValsetConfirm
// this is the message sent by the validators when they wish to submit their
// signatures over the validator set at a given block height. A validator must
// first call MsgSetEvmAddress to set their Ethereum address to be used for
// signing. Then someone (anyone) must make a ValsetRequest, the request is
// essentially a messaging mechanism to determine which block all validators
// should submit signatures over. Finally validators sign the validator set,
// powers, and Ethereum addresses of the entire validator set at the height of a
// ValsetRequest and submit that signature with this message.
//
// If a sufficient number of validators (66% of voting power) (A) have set
// Ethereum addresses and (B) submit ValsetConfirm messages with their
// signatures it is then possible for anyone to view these signatures in the
// chain store and submit them to Ethereum to update the validator set
// -------------
message MsgValsetConfirm {
  string chain_name     = 1;
  uint64 nonce          = 2;
  string orchestrator   = 3 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string evm_address    = 4;
  string signature      = 5;
}

message MsgValsetConfirmResponse {}

// MsgSendToEvmChain
// This is the message that a user calls when they want to bridge an asset
// it will later be removed when it is included in a batch and successfully
// submitted tokens are removed from the users balance immediately
// -------------
// AMOUNT:
// the coin to send across the bridge, note the restriction that this is a
// single coin not a set of coins that is normal in other Cosmos messages
// FEE:
// the fee paid for the bridge, distinct from the fee paid to the chain to
// actually send this message in the first place. So a successful send has
// two layers of fees for the user
message MsgSendToEvmChain {
  string                   sender     = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string                   chain_name = 2;
  string                   evm_dest   = 3;
  cosmos.base.v1beta1.Coin amount     = 4 [
    (gogoproto.nullable) = false
  ];
  cosmos.base.v1beta1.Coin bridge_fee = 5 [
    (gogoproto.nullable) = false
  ];
}

message MsgSendToEvmChainResponse {}

// MsgRequestBatch
// this is a message anyone can send that requests a batch of transactions to
// send across the bridge be created for whatever block height this message is
// included in. This acts as a coordination point, the handler for this message
// looks at the AddToOutgoingPool tx's in the store and generates a batch, also
// available in the store tied to this message. The validators then grab this
// batch, sign it, submit the signatures with a MsgConfirmBatch before a relayer
// can finally submit the batch
// -------------
message MsgRequestBatch {
  string sender     = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string denom      = 2;
  string chain_name = 3;
}

message MsgRequestBatchResponse {}

// MsgConfirmBatch
// When validators observe a MsgRequestBatch they form a batch by ordering
// transactions currently in the txqueue in order of highest to lowest fee,
// cutting off when the batch either reaches a hardcoded maximum size (to be
// decided, probably around 100) or when transactions stop being profitable
// (TODO determine this without nondeterminism) This message includes the batch
// as well as an Ethereum signature over this batch by the validator
// -------------
message MsgConfirmBatch {
  string chain_name     = 1;
  uint64 nonce          = 2;
  string token_contract = 3;
  string evm_signer     = 4;
  string orchestrator   = 5 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string signature      = 6;
}

message MsgConfirmBatchResponse {}

// MsgConfirmLogicCall
// When validators observe a MsgRequestBatch they form a batch by ordering
// transactions currently in the txqueue in order of highest to lowest fee,
// cutting off when the batch either reaches a hardcoded maximum size (to be
// decided, probably around 100) or when transactions stop being profitable
// (TODO determine this without nondeterminism) This message includes the batch
// as well as an Ethereum signature over this batch by the validator
// -------------
message MsgConfirmLogicCall {
  string chain_name         = 1;
  string invalidation_id    = 2;
  uint64 invalidation_nonce = 3;
  string evm_signer         = 4;
  string orchestrator       = 5 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string signature          = 6;
}

message MsgConfirmLogicCallResponse {}

// MsgSendToCosmosClaim
// When more than 66% of the active validator set has
// claimed to have seen the deposit enter the ethereum blockchain coins are
// issued to the Cosmos address in question
// -------------
message MsgSendToCosmosClaim {
  string chain_name       = 1;
  uint64 event_nonce      = 2;
  uint64 evm_block_height = 3;
  string token_contract   = 4;
  string amount           = 5 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable)   = false
  ];
  string evm_sender       = 6;
  string cosmos_receiver  = 7 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string orchestrator     = 8 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

message MsgSendToCosmosClaimResponse {}

// MsgSendFromEvmChainToEvmChainClaim
// When more than 66% of the active validator set has
// claimed to have seen the deposit enter the ethereum blockchain coins are
// issued to the Cosmos address in question
// -------------
message MsgSendFromEvmChainToEvmChainClaim {
  string chain_name       = 1;
  uint64 event_nonce      = 2;
  uint64 evm_block_height = 3;
  string token_contract   = 4;
  string amount           = 5 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable)   = false
  ];
  string evm_sender       = 6;
  string to_chain_name    = 7;
  string receiver         = 8;
  string bridge_fee       = 9 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable)   = false
  ];
  string orchestrator     = 10 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

message MsgSendFromEvmChainToEvmChainClaimResponse {}

// MsgExecuteIbcAutoForwards
// Prompts the forwarding of Pending IBC Auto-Forwards in the queue
// The Pending forwards will be executed in order of their original SendToCosmos.EventNonce
// The funds in the queue will be sent to a local gravity-prefixed address if IBC transfer is not possible
message MsgExecuteIbcAutoForwards {
  uint64 forwards_to_clear = 1; // How many queued forwards to clear, be careful about gas limits
  string executor = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"]; // This message's sender
}

message MsgExecuteIbcAutoForwardsResponse {}

// BatchSendToEvmChainClaim claims that a batch of send to EVM chain
// operations on the bridge contract was executed.
message MsgBatchSendToEvmChainClaim {
  string chain_name       = 1;
  uint64 event_nonce      = 2;
  uint64 evm_block_height = 3;
  uint64 batch_nonce      = 4;
  string token_contract   = 5;
  string orchestrator     = 6 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

message MsgBatchSendToEvmChainClaimResponse {}

// ERC20DeployedClaim allows the Cosmos module
// to learn about an ERC20 that someone deployed
// to represent a Cosmos asset
message MsgERC20DeployedClaim {
  string chain_name       = 1;
  uint64 event_nonce      = 2;
  uint64 evm_block_height = 3;
  string cosmos_denom     = 4;
  string token_contract   = 5;
  string name             = 6;
  string symbol           = 7;
  uint64 decimals         = 8;
  string orchestrator     = 9 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

message MsgERC20DeployedClaimResponse {}

// This informs the Cosmos module that a logic
// call has been executed
message MsgLogicCallExecutedClaim {
  string chain_name         = 1;
  uint64 event_nonce        = 2;
  uint64 evm_block_height   = 3;
  bytes  invalidation_id    = 4;
  uint64 invalidation_nonce = 5;
  string orchestrator       = 6 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

message MsgLogicCallExecutedClaimResponse {}

// This informs the Cosmos module that a validator
// set has been updated.
message MsgValsetUpdatedClaim {
  string chain_name                = 1;
  uint64 event_nonce               = 2;
  uint64 valset_nonce              = 3;
  uint64 evm_block_height          = 4;
  repeated BridgeValidator members = 5 [(gogoproto.nullable) = false];
  string reward_amount             = 6 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable)   = false
  ];
  string reward_token              = 7;
  string orchestrator              = 8 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

message MsgValsetUpdatedClaimResponse {}

// This call allows the sender (and only the sender)
// to cancel a given MsgSendToEvmChain and recieve a refund
// of the tokens
message MsgCancelSendToEvmChain {
  string chain_name     = 1;
  uint64 transaction_id = 2;
  string sender         = 3 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

message MsgCancelSendToEvmChainResponse {}

// This call allows anyone to submit evidence that a
// validator has signed a valset, batch, or logic call that never
// existed on the Cosmos chain. 
// Subject contains the batch, valset, or logic call.
message MsgSubmitBadSignatureEvidence {
  string chain_name             = 1;
  google.protobuf.Any subject   = 2
      [ (cosmos_proto.accepts_interface) = "EthereumSigned" ];
  string              signature = 3;
  string              sender    = 4 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

message MsgSubmitBadSignatureEvidenceResponse {}

message EventSetOperatorAddress {
  string message = 1;
  string address = 2;
}

message EventValsetConfirmKey {
  string message    = 1;
  string chain_name = 2;
  string key        = 3;
}

message EventBatchCreated {
  string message      = 1;
  string chain_name   = 2;
  string batch_nonce  = 3;
}

message EventBatchConfirmKey {
  string message           = 1;
  string batch_confirm_key = 2;
}

message EventBatchSendToEvmChainClaim {
  string chain_name = 1;
  string nonce = 2;
}

message EventClaim {
  string message        = 1;
  string chain_name     = 2;
  string claim_hash     = 3;
  string attestation_id = 4;
}

message EventBadSignatureEvidence {
  string message                   = 1;
  string chain_name                = 2;
  string bad_evm_signature         = 3;
  string bad_evm_signature_subject = 4;
}

message EventERC20DeployedClaim {
  string chain_name = 1;
  string token      = 2;
  string nonce      = 3;
}

message EventValsetUpdatedClaim {
  string chain_name = 1;
  string nonce = 2;
}

message EventMultisigUpdateRequest {
  string chain_name      = 1;
  string bridge_contract = 2;
  string bridge_chain_id = 3;
  string multisig_id     = 4;
  string nonce           = 5;
}

message EventOutgoingLogicCallCanceled {
  string chain_name                     = 1;
  string logic_call_invalidation_id     = 2;
  string logic_call_invalidation_nonce  = 3;
}

message EventSignatureSlashing {
  string type     = 1;
  string address  = 2;
}

message EventOutgoingTxId {
    string message = 1;
    string chain_name = 2;
    string tx_id = 3;
}